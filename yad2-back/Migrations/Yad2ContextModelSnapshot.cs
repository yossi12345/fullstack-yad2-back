// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using yad2_back.Data;

#nullable disable

namespace yad2_back.Migrations
{
    [DbContext(typeof(Yad2Context))]
    partial class Yad2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("yad2_back.Models.ApartmentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdType")
                        .HasColumnType("int");

                    b.Property<string>("AdvertiserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AmountOfBalcony")
                        .HasColumnType("int");

                    b.Property<int?>("AmountOfFloorsInBuilding")
                        .HasColumnType("int");

                    b.Property<int?>("AmountOfParkingPlaces")
                        .HasColumnType("int");

                    b.Property<double>("AmountOfRooms")
                        .HasColumnType("float");

                    b.Property<int>("AmountOfShowerRooms")
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("IsFrozen")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("View")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("builtArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiserId");

                    b.HasIndex("TypeName");

                    b.HasIndex("UserModelId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("yad2_back.Models.ApartmentTypeModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("SearchModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Name");

                    b.HasIndex("SearchModelId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("yad2_back.Models.FeatureModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ApartmentModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SearchModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Name");

                    b.HasIndex("ApartmentModelId");

                    b.HasIndex("SearchModelId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("yad2_back.Models.ImageModel", b =>
                {
                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ApartmentModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImagePath");

                    b.HasIndex("ApartmentModelId");

                    b.ToTable("ImageModel");
                });

            modelBuilder.Entity("yad2_back.Models.PhoneModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ApartmentModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentModelId");

                    b.ToTable("PhoneModel");
                });

            modelBuilder.Entity("yad2_back.Models.SearchModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreeSearch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ImmediateEntry")
                        .HasColumnType("bit");

                    b.Property<double?>("MaxAmoutOfRooms")
                        .HasColumnType("float");

                    b.Property<int?>("MaxArea")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFloor")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPrice")
                        .HasColumnType("int");

                    b.Property<double?>("MinAmoutOfRooms")
                        .HasColumnType("float");

                    b.Property<int?>("MinArea")
                        .HasColumnType("int");

                    b.Property<int?>("MinFloor")
                        .HasColumnType("int");

                    b.Property<int?>("MinPrice")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("SearchModel");
                });

            modelBuilder.Entity("yad2_back.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("yad2_back.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("yad2_back.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yad2_back.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("yad2_back.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("yad2_back.Models.ApartmentModel", b =>
                {
                    b.HasOne("yad2_back.Models.UserModel", "Advertiser")
                        .WithMany("ApartmentForSelling")
                        .HasForeignKey("AdvertiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yad2_back.Models.ApartmentTypeModel", "Type")
                        .WithMany()
                        .HasForeignKey("TypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yad2_back.Models.UserModel", null)
                        .WithMany("FavoriteApartments")
                        .HasForeignKey("UserModelId");

                    b.Navigation("Advertiser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("yad2_back.Models.ApartmentTypeModel", b =>
                {
                    b.HasOne("yad2_back.Models.SearchModel", null)
                        .WithMany("AssetType")
                        .HasForeignKey("SearchModelId");
                });

            modelBuilder.Entity("yad2_back.Models.FeatureModel", b =>
                {
                    b.HasOne("yad2_back.Models.ApartmentModel", null)
                        .WithMany("Features")
                        .HasForeignKey("ApartmentModelId");

                    b.HasOne("yad2_back.Models.SearchModel", null)
                        .WithMany("Features")
                        .HasForeignKey("SearchModelId");
                });

            modelBuilder.Entity("yad2_back.Models.ImageModel", b =>
                {
                    b.HasOne("yad2_back.Models.ApartmentModel", null)
                        .WithMany("ImagesPaths")
                        .HasForeignKey("ApartmentModelId");
                });

            modelBuilder.Entity("yad2_back.Models.PhoneModel", b =>
                {
                    b.HasOne("yad2_back.Models.ApartmentModel", null)
                        .WithMany("Phones")
                        .HasForeignKey("ApartmentModelId");
                });

            modelBuilder.Entity("yad2_back.Models.SearchModel", b =>
                {
                    b.HasOne("yad2_back.Models.UserModel", null)
                        .WithMany("LastApartmentSearches")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("yad2_back.Models.ApartmentModel", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("ImagesPaths");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("yad2_back.Models.SearchModel", b =>
                {
                    b.Navigation("AssetType");

                    b.Navigation("Features");
                });

            modelBuilder.Entity("yad2_back.Models.UserModel", b =>
                {
                    b.Navigation("ApartmentForSelling");

                    b.Navigation("FavoriteApartments");

                    b.Navigation("LastApartmentSearches");
                });
#pragma warning restore 612, 618
        }
    }
}
